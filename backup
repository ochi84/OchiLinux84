#!/bin/bash
 
#  _                _                
# | |__   __ _  ___| | ___   _ _ __ MIT Licence
# | '_ \ / _` |/ __| |/ / | | | '_ \
# | |_) | (_| | (__|   <| |_| | |_) |
# |_.__/ \__,_|\___|_|\_\\__,_| .__/
#                             |_|                  
#
# Script        : backup
# Location      : /usr/local/bin
# Author        : Jens Ochmann
# Date          : 2024-06-02
# Description   : Perform local and external backup.
# Requires root : No

# Load config file
CONFIG_FILE="$HOME/.config/sc.conf"
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
else
    echo -e "${RED}Error: Configuration file not found.${NC}"
    echo -e "${RED}Please ensure the configuration file 'sc.conf' exists at $HOME/.config/${NC}"
    exit 1
fi

# UUID of the drive (search for it with 'sudo blkid')
UUID="B4D48115D480DB4E"

# Mount point
MOUNT_POINT="/media/$USERNAME/Elements"

# Check if the drive is already mounted
if ! grep -qs "$MOUNT_POINT" /proc/mounts; then
  # Create the mount point if it doesn't exist
  sudo mkdir -p "$MOUNT_POINT"
  
  echo
  echo -e "${YELLOW}Mounting the external drive...${NC}"
  sudo mount -U "$UUID" "$MOUNT_POINT"
  if [ $? -ne 0 ]; then
    echo
    echo -e "${RED}Failed to mount the external drive. Exiting.${NC}"
    exit 1
  fi
else
  echo -e "${YELLOW}External drive is already mounted.${NC}"
fi

echo
printf "${YELLOW}Starting backup...${NC}\n"

# Check if the external backup drive is available
if [ ! -d "$BACKUP_DIR_EXT" ]; then
    printf "${RED}Error: External backup drive is not available.${NC}\n"
    exit 1
fi

# Create the local backup directory if it does not exist
mkdir -p "$BACKUP_DIR"

# Create the backup archive
tar -czf "$BACKUP_DIR/$BACKUP_FILE" --exclude="$BACKUP_DIR" "$HOME" || printf "${RED}Error creating backup archive.${NC}\n"

# Copy files from local backup to external hard drive using rsync
rsync -avh --delete --progress $BACKUP_DIR/ $BACKUP_DIR_EXT/ || printf "${RED}Error: rsync failed to copy files.${NC}\n"
printf "${GREEN}Backup copied to external drive.${NC}\n"

# Copy files from local to GitHub folder using gitupd
echo
printf "${YELLOW}Copying files for GitHub...${NC}\n"
gitupd || printf "${RED}Error updating GitHub.${NC}\n"

# Optional: Unmount the drive after the backup
echo
echo -e "${YELLOW}Unmounting the external drive...${NC}"
sudo umount "$MOUNT_POINT"

echo
printf "${GREEN}Finished all operations.${NC}\n"
echo
