#!/usr/bin/env bash
#
#  _                _                
# | |__   __ _  ___| | ___   _ _ __ 
# | '_ \ / _` |/ __| |/ / | | | '_ \
# | |_) | (_| | (__|   <| |_| | |_) |
# |_.__/ \__,_|\___|_|\_\\__,_| .__/
#                             |_|                  
#
# Script        : backup
# Location      : /usr/local/bin/backup
# Author        : Jens Ochmann
# Date          : 2025‑04‑20
# License       : MIT
# Description   : Perform local and external backups incl. GitHub sync.
# Requires root : Elevates via sudo if needed
#

set -euo pipefail

#–––––––––––––––– Farben (Fallback falls nicht in sc.conf) ––––––––––––––––––––
RED=${RED:-"\033[0;31m"}
GREEN=${GREEN:-"\033[0;32m"}
YELLOW=${YELLOW:-"\033[0;33m"}
BLUE=${BLUE:-"\033[0;34m"}
NC=${NC:-"\033[0m"}

info() { printf "%b%s%b\n" "${YELLOW}" "$*" "${NC}"; }
ok()   { printf "%b%s%b\n" "${GREEN}"  "$*" "${NC}"; }
err()  { printf "%b%s%b\n" "${RED}"    "$*" "${NC}" >&2; }

#–––––––––––––––– Root‑Handling ––––––––––––––––––––––––––––––––––––––––––––––––
if (( EUID != 0 )); then
  exec sudo --preserve-env=RED,GREEN,YELLOW,BLUE,NC "$0" "$@"
fi

#–––––––––––––––– Konfiguration laden ––––––––––––––––––––––––––––––––––––––––––
CONFIG_FILE="${HOME}/.config/sc.conf"
if [[ -f "${CONFIG_FILE}" ]]; then
  # shellcheck source=/dev/null
  source "${CONFIG_FILE}"
else
  err "Configuration file not found: ${CONFIG_FILE}"
  exit 1
fi

: "${UUID:?UUID of backup drive not set in sc.conf}"
: "${BACKUP_DIR:=/tmp/backup}"
: "${BACKUP_DIR_EXT:=/mnt/backup_ext}"
BACKUP_FILE=${BACKUP_FILE:-"$(hostname)-$(date +%Y%m%d).tar.gz"}

MOUNT_POINT="/media/${SUDO_USER:-$USER}/backup"

#–––––––––––––––– Backup‑Platte mounten ––––––––––––––––––––––––––––––––––––––––
if ! grep -qs "${MOUNT_POINT}" /proc/mounts; then
  info "Mounting external drive …"
  mkdir -p "${MOUNT_POINT}"
  mount -U "${UUID}" "${MOUNT_POINT}" || { err "Mount failed."; exit 1; }
else
  ok "External drive already mounted."
fi

BACKUP_DIR_EXT="${MOUNT_POINT}"

#–––––––––––––––– Lokales Backup anlegen –––––––––––––––––––––––––––––––––––––––
info "Creating local backup archive …"
mkdir -p "${BACKUP_DIR}"
tar -czf "${BACKUP_DIR}/${BACKUP_FILE}" --exclude="${BACKUP_DIR}" "${HOME}" \
  && ok "Archive created: ${BACKUP_FILE}" \
  || err "Error creating backup archive."

#–––––––––––––––– Auf externe Platte syncen ––––––––––––––––––––––––––––––––––––
info "Syncing to external drive …"
rsync -a --delete --progress "${BACKUP_DIR}/" "${BACKUP_DIR_EXT}/" \
  && ok "Backup copied to external drive." \
  || err "rsync failed."

#–––––––––––––––– GitHub‑Sync ––––––––––––––––––––––––––––––––––––––––––––––––––
info "Running gitupd …"
if command -v gitupd >/dev/null 2>&1; then
  gitupd && ok "GitHub update finished." || err "gitupd returned errors."
else
  err "gitupd not found in PATH."
fi

#–––––––––––––––– Laufwerk aushängen –––––––––––––––––––––––––––––––––––––––––––
info "Unmounting external drive …"
umount "${MOUNT_POINT}" && ok "Drive unmounted." || err "Failed to unmount drive."

echo -e "\n${GREEN}Backup routine completed successfully.${NC}"

