#!/bin/bash

#                              _
#  _ __ ___   ___  _   _ _ __ | |_ _ __ ___   __ _ _ __ MIT Licence
# | '_ ` _ \ / _ \| | | | '_ \| __| '_ ` _ \ / _` | '_ \
# | | | | | | (_) | |_| | | | | |_| | | | | | (_| | | | |
# |_| |_| |_|\___/ \__,_|_| |_|\__|_| |_| |_|\__,_|_| |_|
# 
#
# Script        : mountman
# Location      : /usr/local/bin
# Author        : Jens Ochmann
# Date          : 2024-05-20
# Description   : Mount/Unmount external devices.
# Requires root : Yes

# Define colors
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m'

# Default mount path
MOUNT_BASE="/media/$USER"

# Function to mount a device
mount_device() {
    local device=$1
    local mount_point=$2

    if [[ ! -d $mount_point ]]; then
        sudo mkdir -p "$mount_point"
    fi

    sudo mount "$device" "$mount_point"
    if [[ $? -eq 0 ]]; then
        echo -e "${YELLOW}The device $device has been successfully mounted to $mount_point.${NC}"
	echo
    else
        echo -e "${RED}Failed to mount $device.${NC}"
	echo
    fi
}

# Function to unmount a device
unmount_device() {
    local device=$1
    sudo umount "$device"
    if [[ $? -eq 0 ]]; then
        echo -e "${YELLOW}The device $device has been successfully unmounted.${NC}"
	echo
    else
        echo -e "${RED}Failed to unmount $device.${NC}"
	echo
    fi
}

# List available external devices
list_devices() {
    lsblk -o NAME,MODEL,SIZE,TYPE,MOUNTPOINT | grep -E "disk|part" | grep -vE "loop|sr0|nvme0n1"
}

# Main menu
main_menu() {
    echo -e "${YELLOW}Available external devices:${NC}"
    list_devices
    echo ""
    echo -e "${YELLOW}Enter the device name (e.g., sdb1):${NC}"
    read device_name

    if [[ -z $device_name ]]; then
        echo -e "${RED}No device selected. Exiting.${NC}"
        exit 1
    fi

    local device_path="/dev/$device_name"

    if [[ ! -b $device_path ]]; then
        echo -e "${RED}Invalid device. Exiting.${NC}"
        exit 1
    fi

    echo -e "${YELLOW}Select an action:${NC}"
    echo -e "${YELLOW}1) Mount${NC}"
    echo -e "${YELLOW}2) Unmount${NC}"
    read action

    case $action in
        1)
            local label=$(lsblk -no LABEL $device_path)
            if [[ -z $label ]]; then
                label=$device_name
            fi
            mount_point="$MOUNT_BASE/$label"

            mount_device "$device_path" "$mount_point"
            ;;
        2)
            unmount_device "$device_path"
            ;;
        *)
            echo -e "${RED}Invalid selection. Exiting.${NC}"
            exit 1
            ;;
    esac
}

# Run script
main_menu
