#!/usr/bin/env bash
#
#        _ _                   _ 
#   __ _(_) |_ _   _ _ __   __| |
#  / _` | | __| | | | '_ \ / _` |
# | (_| | | |_| |_| | |_) | (_| |
#  \__, |_|\__|\__,_| .__/ \__,_|
#  |___/            |_|  
#
# Script        : gitupd
# Location      : /usr/local/bin
# Author        : Jens Ochmann
# Date          : 2025‑04‑20
# License       : MIT
# Description   : Backup and sync local files to the OchiLinux84 GitHub repository.
# Requires root : No
#

set -euo pipefail

#–––––––––––––––– Default‑Farbcodes (falls in sc.conf nicht definiert) ––––––––
RED=${RED:-"\033[0;31m"}
GREEN=${GREEN:-"\033[0;32m"}
YELLOW=${YELLOW:-"\033[0;33m"}
BLUE=${BLUE:-"\033[0;34m"}
NC=${NC:-"\033[0m"}

info()   { printf "%b%s%b\n"  "${YELLOW}" "$*" "${NC}"; }
ok()     { printf "%b%s%b\n"  "${GREEN}"  "$*" "${NC}"; }
err()    { printf "%b%s%b\n"  "${RED}"    "$*" "${NC}" >&2; }

#–––––––––––––––– Konfiguration laden ––––––––––––––––––––––––––––––––––––––––––
CONFIG_FILE="${HOME}/.config/sc.conf"
if [[ ! -f "${CONFIG_FILE}" ]]; then
  err "Configuration file not found: ${CONFIG_FILE}"
  exit 1
fi
# shellcheck source=/dev/null
source "${CONFIG_FILE}"

: "${OCHILINUX_DIR:?OCHILINUX_DIR not set in sc.conf}"

#–––––––––––––––– Repository sicherstellen –––––––––––––––––––––––––––––––––––––
if ! git -C "${OCHILINUX_DIR}" rev-parse --is-inside-work-tree &>/dev/null; then
  info "${BLUE}${OCHILINUX_DIR}${YELLOW} is missing – cloning repository …"
  git clone --depth 1 https://github.com/ochi84/ochilinux84.git "${OCHILINUX_DIR}"
else
  ok "Repository found at ${OCHILINUX_DIR}"
fi
echo

#–––––––––––––––– Kleine rsync‑Hilfe­funktion ––––––––––––––––––––––––––––––––––
rsync_safe() {                    # rsync_safe SRC DEST
  local src=$1 dest=$2
  if [[ -e "${src}" ]]; then
    rsync -a --progress "${src}" "${dest}" \
      && ok "Updated $(basename "${dest}")" \
      || err "Failed to update $(basename "${dest}")"
  else
    info "Skip: ${src} not found"
  fi
  echo
}

info "Synchronising configuration files …"

#–––––––––––––––– Einfache Datei­zuordnungen (Quelle → Zielname) –––––––––––––––
declare -A FILES=(
  ["${BASHRC_DIR}/.bashrc"]="dot.bashrc"
  ["${VIMRC_DIR}/.vimrc"]="dot.vimrc"
  ["${SCCONF_DIR}/sc.conf"]="sc.conf"
  ["${RCLUA_DIR}/rc.lua"]="rc.lua"
  ["${RCLUA_DIR}/rc.lua.original"]="rc.lua.original"
  ["${RCCONF_DIR}/rc.conf"]="rc.conf"
  ["${PICOM_DIR}/picom.conf"]="picom.conf"
  ["${NFCONF_DIR}/config.conf"]="nf.conf"
  ["${AWMBG_DIR}/background.png"]="awmbg.png"
  ["${OCHILOGO_DIR}/ochilogo.png"]="ochilogo.png"
)

for src in "${!FILES[@]}"; do
  rsync_safe "${src}" "${OCHILINUX_DIR}/${FILES[$src]}"
done

#–––––––––––––––– Verzeichnis­syncs ––––––––––––––––––––––––––––––––––––––––––––
rsync_safe "${FONT_DIR}/nerdfonts" "${OCHILINUX_DIR}/"
rsync_safe "${TILIX_DIR}/schemes"  "${OCHILINUX_DIR}/tilix/"
rsync_safe "${VIM_DIR}/colors"     "${OCHILINUX_DIR}/vim/"

# Tilix‑Dump separat, da nicht via rsync
if dconf dump '/com/gexperts/Tilix/' > "${OCHILINUX_DIR}/tilix.conf"; then
  ok "Updated tilix.conf"
else
  err "Failed to dump tilix.conf"
fi
echo

#–––––––––––––––– Lokale Scripts aktualisieren –––––––––––––––––––––––––––––––––
info "Synchronising local scripts …"
scripts=(backup gitupd snapcrash update dispatch startup bye mountman syscheck)
for script in "${scripts[@]}"; do
  rsync_safe "/usr/local/bin/${script}" "${OCHILINUX_DIR}/${script}"
done

ok "Git update process completed."

