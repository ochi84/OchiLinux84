#!/bin/bash

#      _             _               
#  ___| |_ __ _ _ __| |_ _   _ _ __  MIT License
# / __| __/ _` | '__| __| | | | '_ \ 
# \__ \ || (_| | |  | |_| |_| | |_) |
# |___/\__\__,_|_|   \__|\__,_| .__/ 
#                             |_|  
#
# Script        : startup
# Location      : /usr/local/bin
# Author        : Jens Ochmann
# Date          : 2024-06-02
# Description   : Install specified applications and run the dispatch script to dispatch files from GitHub repository
# Requires root : Yes

# Colors
NC='\033[0m' # No Color
BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'

# Ensure root
root() {
if [ "$(id -u)" != "0" ]; then
   echo -e "${RED}This script must be run as root${NC}" >&2
   exit 1
fi
}

root

# Prompt the user to enter their username
echo
read -p "Please enter your username: " USERNAME

# Define HOME directory based on the entered username
HOME="/home/$USERNAME"

# Check if the entered username exists
if [ ! -d "$HOME" ]; then
    echo -e "${RED}Error: User '$USERNAME' does not exist or home directory not found.${NC}"
    exit 1
fi

# Check if the GitHub directory exists
OCHILINUX_DIR="$HOME/github/ochilinux84"

if [ ! -d "$OCHILINUX_DIR" ]; then
    echo -e "${BLUE}$OCHILINUX_DIR ${YELLOW}does not exist.${NC}"
    echo -e "${YELLOW}Cloning repository from Github...${NC}"
    mkdir $HOME/github
    cd $HOME/github
    sudo apt install git -y
	sudo -u $USERNAME git clone https://github.com/ochi84/ochilinux84.git
else
    echo
	echo -e "${YELLOW}Check for GitHub directory | ${GREEN}ok${NC}"
fi

# Load config file
CONFIG_FILE="$OCHILINUX_DIR/sc.conf"
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
else
    echo -e "${RED}Error: Configuration file not found.${NC}"
    echo -e "${RED}Please ensure the configuration file 'sc.conf' exists at $HOME/.config/${NC}"
    exit 1
fi

echo
echo -e "${YELLOW}Starting the installation of applications...${NC}"

# Function to install packages
install_packages() {
    local packages=("${@}")
    local installed=()
    for app in "${packages[@]}"; do
        if sudo apt install -y "$app"; then
            echo -e "${GREEN}Installed $app successfully.${NC}"
            echo
            installed+=("$app")  # Add app to the list of successfully installed packages
        else
            echo -e "${RED}Failed to install $app. Check if the package exists or if there are network issues.${NC}"
            echo
        fi
    done
    echo -e "${YELLOW}Successfully installed the following packages:${NC}"
    printf '%s\n' "${installed[@]}"  # List successfully installed packages
}

# Display installation options with descriptions
echo -e "Select the installation type:"
echo -e "1 - Minimal Install      : ${BLUE}Basic utilities like 'mc', 'vim', 'micro', 'ranger'.${NC}"
echo -e "2 - Minimal Plus Install : ${BLUE}Adds more advanced VIM plugins and tools on top of the Minimal Install.${NC}"
echo -e "3 - Expand Install       : ${BLUE}Includes all packages from Minimal Plus and additional tools like 'git', 'fzf', 'exa'.${NC}"
echo -e "4 - Full Install         : ${BLUE}The most comprehensive installation, including window managers and advanced applications.${NC}"
read -p "Enter your choice (1-4): " choice

# Prepare installation array based on user choice
all_packages=()
case $choice in
    1)
        all_packages+=("${minimal[@]}")
        ;;
    2)
        all_packages+=("${minimal[@]}")
        all_packages+=("${minimal_plus[@]}")
        ;;
    3)
        all_packages+=("${minimal[@]}")
        all_packages+=("${minimal_plus[@]}")
        all_packages+=("${expand[@]}")
        ;;
    4)
        all_packages+=("${minimal[@]}")
        all_packages+=("${minimal_plus[@]}")
        all_packages+=("${expand[@]}")
        all_packages+=("${full[@]}")
        ;;
    *)
        echo "${RED}Invalid choice. Exiting.${NC}"
        exit 1
        ;;
esac

# Install selected packages
install_packages "${all_packages[@]}"

# Install Dispatch
if sudo cp $OCHILINUX_DIR/dispatch /usr/local/bin/ && sudo chmod +x /usr/local/bin/dispatch; then
    echo
    echo -e "${GREEN}Dispatch successfully installed and made executable.${NC}"
else
    echo
    echo -e "${RED}Failed to install and set execute permission on dispatch.${NC}"
    exit 1
fi

echo
echo -e "${YELLOW}Running dispatch...${NC}"
echo
    
# Ensure dispatch is executable and available
if /usr/local/bin/dispatch; then
    echo
    echo -e "${GREEN}Dispatch executed successfully.${NC}"
else
    echo
    echo -e "${RED}Failed to execute dispatch.${NC}"
    exit 1
fi

# Install Nerd Fonts
echo
echo -e "${YELLOW}Installing Nerd Fonts...${NC}"

# Define the font directory
FONT_DIR="/usr/share/fonts"

# Source directory for Nerd Fonts
NERDFONTS_DIR="$OCHILINUX_DIR/nerdfonts"
if [ -d "$NERDFONTS_DIR" ]; then
    sudo cp -r "$NERDFONTS_DIR" "$FONT_DIR/"
    echo -e "${GREEN}Nerd Fonts installed successfully.${NC}"
else
    echo -e "${RED}Nerd Fonts directory not found in the repository.${NC}"
    exit 1
fi

## Clear and regenerate font cache
#echo "Clearing font cache..."
#rm -rf ~/.cache/fontconfig/*
#
#echo "Rebuilding font cache..."
#fc-cache -fv
#
## Verify the installation
#echo "Verifying installed Nerd Fonts..."
#if fc-list | grep -iq "Nerd Font"; then
#    echo -e "${GREEN}Nerd Fonts verification completed successfully.${NC}"
#else
#    echo -e "${RED}Nerd Fonts verification failed.${NC}"
#    exit 1
#fi

# Install Tilix Schemes
echo
echo -e "${YELLOW}Installing Tilix Schemes...${NC}"

# Define Tilix Schemes directory
TILIX_DIR="$HOME/.config/tilix/"

# Source directory for Tilix Schemes
TILIX_OCHILINUX_DIR="$OCHILINUX_DIR/tilix"
if [ -d "$TILIX_OCHILINUX_DIR" ]; then
    cp -r "$TILIX_DIR/schemes" "$TILIX_OCHILINUX_DIR/"
    echo -e "${GREEN}Tilix Schemes installed successfully.${NC}"
else
    echo -e "${RED}Tilix Schemes directory not found in the repository.${NC}"
    exit 1
fi

echo
echo -e "${GREEN}All desired applications have been installed.${NC}"
echo
