#!/usr/bin/env bash
#
#      _             _               
#  ___| |_ __ _ _ __| |_ _   _ _ __  
# / __| __/ _` | '__| __| | | | '_ \ 
# \__ \ || (_| | |  | |_| |_| | |_) |
# |___/\__\__,_|_|   \__|\__,_| .__/ 
#                             |_|  
#
# Script        : startup
# Location      : /usr/local/bin/startup
# Author        : Jens Ochmann
# Date          : 2025‑04‑20
# License       : MIT
# Description   : Bootstrap system, install selected package set and run dispatch.
# Requires root : Elevates via sudo if needed
#

set -euo pipefail

#–––––––––––– Farben (Fallback) ––––––––––––––––––––––––––––––––––––––––––––––––
RED=${RED:-"\033[0;31m"} ; GREEN=${GREEN:-"\033[0;32m"}
YELLOW=${YELLOW:-"\033[0;33m"} ; NC=${NC:-"\033[0m"}
info() { printf "%b%s%b\n" "${YELLOW}" "$*" "${NC}"; }
ok()   { printf "%b%s%b\n" "${GREEN}"  "$*" "${NC}"; }
err()  { printf "%b%s%b\n" "${RED}"    "$*" "${NC}" >&2; }

#–––––––––––– Root‑Handling ––––––––––––––––––––––––––––––––––––––––––––––––––––
if (( EUID != 0 )); then
  exec sudo --preserve-env=RED,GREEN,YELLOW,NC "$0" "$@"
fi

#–––––––––––– Ziel­benutzer bestimmen ––––––––––––––––––––––––––––––––––––––––––
TARGET_USER=${SUDO_USER:-}
if [[ -z "${TARGET_USER}" ]]; then
  echo
  read -rp "Please enter the non‑root user for installation: " TARGET_USER
fi

HOME_DIR="/home/${TARGET_USER}"
[[ -d "${HOME_DIR}" ]] || { err "User ${TARGET_USER} not found."; exit 1; }

#–––––––––––– Hilfsfunktionen ––––––––––––––––––––––––––––––––––––––––––––––––––
check() { (( $? == 0 )) || { err "$1 failed."; exit 1; }; }

apt_install() {               # apt_install pkga pkgB …
  DEBIAN_FRONTEND=noninteractive apt-get -y install "$@" && ok "Installed: $*"
}

#–––––––––––– Repository klonen ––––––––––––––––––––––––––––––––––––––––––––––––
OCHILINUX_DIR="${HOME_DIR}/github/ochilinux84"
if ! git -C "${OCHILINUX_DIR}" rev-parse --is-inside-work-tree &>/dev/null; then
  info "Cloning repository …"
  mkdir -p "${HOME_DIR}/github"
  apt_install git
  sudo -u "${TARGET_USER}" git clone --depth 1 https://github.com/ochi84/ochilinux84.git "${OCHILINUX_DIR}"
else
  ok "Repository present: ${OCHILINUX_DIR}"
fi

#–––––––––––– Konfiguration laden ––––––––––––––––––––––––––––––––––––––––––––––
CONFIG_FILE="${OCHILINUX_DIR}/sc.conf"

if [[ -f "${CONFIG_FILE}" ]]; then
    OLD_HOME=$HOME            # ← aktuelles root‑HOME sichern
    export HOME="${HOME_DIR}" # ← Ziel‑User‑HOME für sc.conf
    # shellcheck source=/dev/null
    source "${CONFIG_FILE}"
    export HOME="${OLD_HOME}" # ← root‑HOME zurücksetzen
else
    err "sc.conf not found in repo."
    exit 1
fi
#–––––––––––– Installations­profil wählen ––––––––––––––––––––––––––––––––––––––
echo
info "Select installation type:"
printf "1) Minimal\n2) Minimal Plus\n3) Expand\n4) Full\n"
read -rp "Choice [1‑4]: " choice

declare -a ALL_PKGS
case "${choice}" in
  1) ALL_PKGS=("${minimal[@]}") ;;
  2) ALL_PKGS=("${minimal[@]}" "${minimal_plus[@]}") ;;
  3) ALL_PKGS=("${minimal[@]}" "${minimal_plus[@]}" "${expand[@]}") ;;
  4) ALL_PKGS=("${minimal[@]}" "${minimal_plus[@]}" "${expand[@]}" "${full[@]}") ;;
  *) err "Invalid choice." ;;
esac

#–––––––––––– Pakete installieren –––––––––––––––––––––––––––––––––––––––––––––
info "Installing packages …"
apt-get update -qq
apt_install "${ALL_PKGS[@]}"

#–––––––––––– Dispatch installieren & ausführen –––––––––––––––––––––––––––––––
install -m 755 "${OCHILINUX_DIR}/dispatch" /usr/local/bin/dispatch
ok "dispatch installed."

info "Running dispatch …"
sudo -u "${TARGET_USER}" /usr/local/bin/dispatch
check "dispatch"

#–––––––––––– Zusatzressourcen ––––––––––––––––––––––––––––––––––––––––––––––––
# Nerd‑Fonts
if [[ -d "${OCHILINUX_DIR}/nerdfonts" ]]; then
  install -d /usr/share/fonts
  cp -r "${OCHILINUX_DIR}/nerdfonts" /usr/share/fonts/
  ok "Nerd Fonts copied."
  fc-cache -f
fi

# Tilix schemes
if [[ -d "${OCHILINUX_DIR}/tilix/schemes" ]]; then
  install -d "${HOME_DIR}/.config/tilix"
  cp -r "${OCHILINUX_DIR}/tilix/schemes" "${HOME_DIR}/.config/tilix/"
  chown -R "${TARGET_USER}:${TARGET_USER}" "${HOME_DIR}/.config/tilix"
  ok "Tilix schemes installed."
fi

# UFW
if ! dpkg -s ufw &>/dev/null; then
  apt_install ufw
fi
ufw allow ssh 2>/dev/null || true
ufw --force enable
systemctl enable ufw
ok "UFW configured."

echo -e "\n${GREEN}Startup routine completed successfully.${NC}"

